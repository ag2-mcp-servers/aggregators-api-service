# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:32:19+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query, UploadFile

from models import (
    ApiV2PodcastsCategoriesGetResponse,
    ApiV2PodcastsCountriesGetResponse,
    ApiV2PodcastsLanguagesGetResponse,
    ApiV2StationsCountriesGetResponse,
    ApiV2StationsGenresGetResponse,
    ApiV2StationsLanguagesGetResponse,
    Podcast,
    PodcastEpisode,
    PodcastEpisodeList,
    PodcastSearchParams,
    PodcastSearchResults,
    StationList,
    StationSearchParams,
    StationSearchResults,
)

app = MCPProxy(
    description='Aggregators API',
    title='Aggregators API Service',
    version='0.6-99cfdac',
    servers=[{'description': 'Generated server url', 'url': 'https://api.zeno.fm'}],
)


@app.get(
    '/api/v2/podcasts/categories',
    description=""" Get the list of Categories that can be used to filter podcasts in the search podcasts request """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_podcast_categories():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/podcasts/countries',
    description=""" Get the list of Countries that can be used to filter podcasts in the search podcasts request """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_podcast_countries():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/podcasts/create',
    description=""" Create podcast """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def create_podcast(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/podcasts/languages',
    description=""" Get the list of Languages that can be used to filter podcasts in the search podcasts request """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_podcast_languages():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/podcasts/search',
    description=""" Search podcasts """,
    tags=['podcast_exploration'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def search_podcasts(body: PodcastSearchParams):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/podcasts/{podcastKey}',
    description=""" Delete podcast """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def delete_podcast(podcast_key: str = Path(..., alias='podcastKey')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/podcasts/{podcastKey}',
    description=""" Get podcast """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_podcast(podcast_key: str = Path(..., alias='podcastKey')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/podcasts/{podcastKey}',
    description=""" Update podcast """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def update_podcast(
    podcast_key: str = Path(..., alias='podcastKey'), file: UploadFile = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/podcasts/{podcastKey}/episodes',
    description=""" Get podcast episodes """,
    tags=['podcast_content_management', 'podcast_exploration'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_podcast_episodes(
    podcast_key: str = Path(..., alias='podcastKey'),
    limit: Optional[str] = '10',
    offset: Optional[str] = '0',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/podcasts/{podcastKey}/episodes/create',
    description=""" Create podcast episode """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def create_podcast_episode(
    podcast_key: str = Path(..., alias='podcastKey'), file: UploadFile = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}',
    description=""" Delete podcast episode """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def delete_podcast_1(
    podcast_key: str = Path(..., alias='podcastKey'),
    episode_key: str = Path(..., alias='episodeKey'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}',
    description=""" Get podcast episode """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_podcast_episode(
    podcast_key: str = Path(..., alias='podcastKey'),
    episode_key: str = Path(..., alias='episodeKey'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}',
    description=""" Update podcast episode """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def update_podcast_episode(
    podcast_key: str = Path(..., alias='podcastKey'),
    episode_key: str = Path(..., alias='episodeKey'),
    file: UploadFile = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/stations/countries',
    description=""" Get the list of Countries that can be used to filter stations in the search stations request """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_station_countries():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/stations/genres',
    description=""" Get the list of Genres that can be used to filter stations in the search stations request """,
    tags=[
        'podcast_content_management',
        'podcast_exploration',
        'radio_station_data',
        'radio_station_discovery',
    ],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_station_genres():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/stations/languages',
    description=""" Get the list of Languages that can be used to filter stations in the search stations request """,
    tags=['podcast_content_management'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_station_languages():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/stations/list',
    description=""" List stations """,
    tags=['podcast_exploration'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def get_partner_aggregator_stations(
    page: Optional[str] = '1',
    hits_per_page: Optional[str] = Query('10', alias='hitsPerPage'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/stations/search',
    description=""" Search stations """,
    tags=['radio_station_discovery', 'radio_station_data'],
    security=[
        APIKeyHeader(name="x-zeno-api-key"),
    ],
)
def search_stations(body: StationSearchParams):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
