# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:32:19+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, RootModel, conint


class Country(BaseModel):
    iso: Optional[str] = None
    iso3: Optional[str] = None
    name: Optional[str] = None


class Language(BaseModel):
    name: Optional[str] = None


class Podcast(BaseModel):
    author: Optional[str] = None
    block: Optional[bool] = None
    categories: List[str]
    copyright: Optional[str] = None
    country: Optional[str] = None
    description: str
    explicit: Optional[bool] = None
    image: Optional[str] = None
    key: Optional[str] = None
    keywords: Optional[List[str]] = None
    language: str
    link: Optional[str] = None
    ownerEmail: Optional[str] = None
    ownerName: Optional[str] = None
    showType: Optional[str] = None
    subtitle: Optional[str] = None
    summary: str
    title: str


class PodcastCategory(BaseModel):
    id: Optional[str] = None
    parent: Optional[str] = None
    text: Optional[str] = None


class PodcastEpisode(BaseModel):
    author: Optional[str] = None
    block: Optional[bool] = None
    description: str
    duration: Optional[int] = None
    episode: Optional[int] = None
    episodeType: Optional[str] = None
    explicit: Optional[bool] = None
    fileUrl: Optional[str] = None
    image: Optional[str] = None
    key: Optional[str] = None
    link: Optional[str] = None
    publishDate: datetime
    season: Optional[int] = None
    size: Optional[int] = None
    subtitle: Optional[str] = None
    summary: str
    tags: Optional[List[str]] = None
    title: str


class PodcastEpisodeList(BaseModel):
    items: Optional[List[PodcastEpisode]] = None
    total: Optional[int] = None


class PodcastType(Enum):
    podcasts = 'podcasts'
    shows = 'shows'


class PodcastFilters(BaseModel):
    category: Optional[List[str]] = None
    country: Optional[List[str]] = None
    language: Optional[List[str]] = None
    podcastType: Optional[PodcastType] = None


class PodcastSearchParams(BaseModel):
    filters: Optional[PodcastFilters] = None
    hitsPerPage: Optional[conint(ge=1, le=1000)] = 10
    page: Optional[conint(ge=1)] = 1
    query: Optional[str] = None


class PodcastSearchResults(BaseModel):
    hits: Optional[List[Podcast]] = None
    total: Optional[int] = None


class Station(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    description: Optional[str] = None
    genre: Optional[str] = None
    key: Optional[str] = None
    language: Optional[str] = None
    logo: Optional[str] = None
    name: Optional[str] = None
    stream: Optional[str] = None
    website: Optional[str] = None


class StationFilters(BaseModel):
    country: Optional[List[str]] = None
    genre: Optional[List[str]] = None
    language: Optional[List[str]] = None


class StationGenre(BaseModel):
    name: Optional[str] = None


class StationList(BaseModel):
    items: Optional[List[Station]] = None
    total: Optional[int] = None


class StationSearchParams(BaseModel):
    filters: Optional[StationFilters] = None
    hitsPerPage: Optional[conint(ge=1, le=1000)] = 10
    page: Optional[conint(ge=1)] = 1
    query: Optional[str] = None


class StationSearchResults(BaseModel):
    hits: Optional[List[Station]] = None
    total: Optional[int] = None


class ApiV2PodcastsCategoriesGetResponse(RootModel[List[PodcastCategory]]):
    root: List[PodcastCategory]


class ApiV2PodcastsCountriesGetResponse(RootModel[List[Country]]):
    root: List[Country]


class ApiV2PodcastsCreatePostRequest(BaseModel):
    file_logo: bytes
    podcast: Podcast


class ApiV2PodcastsLanguagesGetResponse(RootModel[List[Language]]):
    root: List[Language]


class ApiV2PodcastsPodcastKeyPutRequest(BaseModel):
    file_logo: Optional[bytes] = None
    podcast: Podcast


class ApiV2PodcastsPodcastKeyEpisodesCreatePostRequest(BaseModel):
    episode: PodcastEpisode
    file_logo: bytes
    file_media: bytes


class ApiV2PodcastsPodcastKeyEpisodesEpisodeKeyPutRequest(BaseModel):
    episode: PodcastEpisode
    file_logo: Optional[bytes] = None


class ApiV2StationsCountriesGetResponse(RootModel[List[Country]]):
    root: List[Country]


class ApiV2StationsGenresGetResponse(RootModel[List[StationGenre]]):
    root: List[StationGenre]


class ApiV2StationsLanguagesGetResponse(RootModel[List[Language]]):
    root: List[Language]
